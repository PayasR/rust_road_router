#[macro_use]
extern crate criterion;

use criterion::{Criterion, black_box};

fn mod1(num: u32) -> u32 {
    num % 86_400_000
}

fn mod2(num: u32) -> u32 {
    if num > 86_400_000 {
        num - 86_400_000
    } else {
        num
    }
}

fn mod3(num: u32) -> u32 {
    if num > 86_400_000 {
        num % 86_400_000
    } else {
        num
    }
}

fn bench_mod(c: &mut Criterion) {
    c.bench_function("mod1", |b| {
        let values = vec![85530772, 99268799, 1422341, 74645604, 4805167, 62577486, 2992862, 77482831, 103907948, 4280566, 82132447, 3133536, 1490798, 17599616, 11096771, 46505178, 100494946, 75671934, 1353340, 41597516, 33105593, 97985082, 49855859, 1051773, 84668288, 67358752, 94087749, 44482249, 30637199, 25512991, 38695502, 51201420, 95849768, 106369067, 87769930, 94386552, 32747833, 54828090, 65733146, 99399848, 76229400, 5972917, 9757333, 95263268, 22797990, 78663488, 2230124, 19015687, 103902448, 66571300, 3976271, 24172825, 24792460, 26544699, 62296488, 106047383, 75314711, 80272112, 32764260, 21024566, 102473188, 28240418, 75392148, 45340570, 47811913, 13317022, 83462633, 37396492, 33368709, 88211254, 68680217, 102606270, 40173659, 13841448, 49624990, 58929263, 76276092, 14131782, 36823657, 39737992, 62147331, 84956731, 91675302, 64805680, 78987637, 101801470, 76201262, 79859374, 72934169, 56724073, 60516388, 18403817, 41217445, 74011338, 64863972, 3454027, 721959, 11954353, 2969284, 35879631];

        b.iter(||
            for &val in &values {
                black_box(mod1(val));
            }
        )
    });

    c.bench_function("mod2", |b| {
        let values = vec![85530772, 99268799, 1422341, 74645604, 4805167, 62577486, 2992862, 77482831, 103907948, 4280566, 82132447, 3133536, 1490798, 17599616, 11096771, 46505178, 100494946, 75671934, 1353340, 41597516, 33105593, 97985082, 49855859, 1051773, 84668288, 67358752, 94087749, 44482249, 30637199, 25512991, 38695502, 51201420, 95849768, 106369067, 87769930, 94386552, 32747833, 54828090, 65733146, 99399848, 76229400, 5972917, 9757333, 95263268, 22797990, 78663488, 2230124, 19015687, 103902448, 66571300, 3976271, 24172825, 24792460, 26544699, 62296488, 106047383, 75314711, 80272112, 32764260, 21024566, 102473188, 28240418, 75392148, 45340570, 47811913, 13317022, 83462633, 37396492, 33368709, 88211254, 68680217, 102606270, 40173659, 13841448, 49624990, 58929263, 76276092, 14131782, 36823657, 39737992, 62147331, 84956731, 91675302, 64805680, 78987637, 101801470, 76201262, 79859374, 72934169, 56724073, 60516388, 18403817, 41217445, 74011338, 64863972, 3454027, 721959, 11954353, 2969284, 35879631];

        b.iter(||
            for &val in &values {
                black_box(mod2(val));
            }
        )
    });

    c.bench_function("mod3", |b| {
        let values = vec![85530772, 99268799, 1422341, 74645604, 4805167, 62577486, 2992862, 77482831, 103907948, 4280566, 82132447, 3133536, 1490798, 17599616, 11096771, 46505178, 100494946, 75671934, 1353340, 41597516, 33105593, 97985082, 49855859, 1051773, 84668288, 67358752, 94087749, 44482249, 30637199, 25512991, 38695502, 51201420, 95849768, 106369067, 87769930, 94386552, 32747833, 54828090, 65733146, 99399848, 76229400, 5972917, 9757333, 95263268, 22797990, 78663488, 2230124, 19015687, 103902448, 66571300, 3976271, 24172825, 24792460, 26544699, 62296488, 106047383, 75314711, 80272112, 32764260, 21024566, 102473188, 28240418, 75392148, 45340570, 47811913, 13317022, 83462633, 37396492, 33368709, 88211254, 68680217, 102606270, 40173659, 13841448, 49624990, 58929263, 76276092, 14131782, 36823657, 39737992, 62147331, 84956731, 91675302, 64805680, 78987637, 101801470, 76201262, 79859374, 72934169, 56724073, 60516388, 18403817, 41217445, 74011338, 64863972, 3454027, 721959, 11954353, 2969284, 35879631];

        b.iter(||
            for &val in &values {
                black_box(mod3(val));
            }
        )
    });
}

criterion_group!(mod_benches, bench_mod);
criterion_main!(mod_benches);
